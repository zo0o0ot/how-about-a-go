# http://godoc.org/golang.org/x/tools/present
# Present files have the following format. 
# The first non-blank non-comment line is the title.
# The subtitle, date, and tags lines are optional.
How about a Go?
That Conference
6 Aug 2018
Tags: golang, ThatConference, projects
: Welcome to my session.


Ross Larson
Software Developer, WTS Paradigm
rosslarson@gmail.com
http://about.me/rosslarson
@rosslarsonWI

* 
.background images/ThatBranding.png
: Welcome!

* 
.background images/ThoseSponsors.png
: Thanks to the sponsors.  You make it happen.

* Agenda
- The History of Golang
- Projects that use Golang
- General language overview
- Pros and Cons of Golang
- Tools to code with Go
- Project suggestions
: We are going over some stuff here.  It is going to be awesome.

* History of Golang
.background images/Go-Logo_Blue.svg
: There is some history here.  It started at Google in 2007.  Other stuff too.

* The Go Gopher
.image images/gopher.svg
: The Go Gopher was introduced when Golang was open sourced in 2009. It was designed by Renee French. https://blog.golang.org/gopher

* Projects that use Golang
.background images/Go-Logo_Blue.svg
: It's not just a toy.  Some serious projects use this language.

* General language overview
.background images/Go-Logo_Blue.svg
: Enough talk, let's look at some code.

* Hello World
.play -edit code/hello/hello-world.go
: Here's some go code. It contains a package, import statements, and a main function.

* Variables and Types
.play code/types/data-types.go
: Here's some variables and data types. There are a few of them. bool, string, int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, byte, rune, float32, float64, complex64, complex128
: Rune is an int32 code point.  It's got something to do with how Go handles UTF-8 characters. For more info on strings and characters - https://blog.golang.org/strings
: unitptr is an integer type that is large enough to hold the bit pattern of any pointer. https://golang.org/pkg/builtin/#uintptr

* Functions and Return Values
.play code/multiple-returns/multiple-returns.go
: Functions are a thing.  They start with func. They can return nothing, one value, or multiple values.

* If and Else
: If and else work like most other languages.

* For loops
: For loops are pretty versatile in Go.

* For, continued
: For is also Go's while.  You can also create infinite loops

* Arrays
.play code/arrays/arrays.go /^func arraysDemo/,/^}/
: In go, arrays are slightly more limited than in other languages.  Once they have been created, their length cannot be changed.  Nothing can be appended to them, but the values inside of the array can be changed. You can also refer to the range inside of an array like [x:y], but you have to note that the array position in the beginning of the array is included, but the array position at the end gives you everythig UNTIL that array position, NOT INCLUDING the given number.  You can also omit the number to go to either the upper or lower limit.

* Slices
.play code/slices/slices.go /^func slicesDemo/,/^}/
: Slices are a more flexible alternative to arrays. You can append to them, as well as copy them. They are zero indexed, like arrays.  When you want to refer to them, the variable gives you the whole object, or you can specify a range.  Range works similar to arrays.

* Maps
.play code/maps/maps.go /^func showSomeMaps/,/^}/
: Maps are a key value store.  They are similar to slices, but you can name the keys instead of needed to use numbers.  They are like dictionaries in python and HashMaps in C#. Maps do not store these key/value pairs in any particular order, so if you print out the whole map, the order of the keys will vary.

* Pointers
.play code/pointers/pointers.go
: Pointers are a thing in go. They point to another variable in memory. They can even point to another pointer.
: References exist in Go, as well.  It's cool, but it's also a bit confusing. Pointers are more powerful, and appear to be used more often in Go code. There's an article that explains the difference. http://spf13.com/post/go-pointers-vs-references/

* Structs
: Struct notes.  Comparing structs to objects. https://golangbot.com/structs-instead-of-classes/

* Interfaces
: Interface notes. https://golang.org/doc/effective_go.html#interfaces_and_types

* Concurrency
: Concurrency notes.  It's built into Go. https://www.golang-book.com/books/intro/10   Probably need to explain routines as well- https://tour.golang.org/concurrency/1

* Errors and nil
.play code/error-creating/error-creating.go
: You may have noticed that go functions allow multiple return items.  Go takes full advantage of this for its error handling system. Most functions return an error all of the time, assigning it to "nil", which is equivalent to null.  When the error does exist, you can handle the error appropriately. You can create your own error message which includes customizable information.
: Go error documentation - https://golang.org/pkg/errors/ and https://golang.org/doc/effective_go.html#errors

* Fancy Errors!
: In addition to customizing the error string, you can also return other relevant information. You can return a struct in the error.

* Errors at Compilation
.play -edit code/compilation-error/compilation-error.go
: Go is relatively picky when it compiles.  It would prefer to tell you about problems as you compile your code as opposed to when you execute your code.

* Testing
- woo.go
.play code/builtin-testing/woo.go /^func Woo/,/^}/
- woo_test.go
.code code/builtin-testing/woo_test.go
: Testing is built into go. If you create a file with the same name and append "_test" to the file, it can automatically run the tests. Test functions have the word test before them. For more info - https://golang.org/pkg/testing/ 
: The Go compiler and linker will not ship your test files in any binaries it produces.

* Pros and Cons of Golang
.background images/Go-Logo_Blue.svg

* Pros
.image images/go-gopher.gif
: Let's start with the Pros.  This may be highly subjective.

* Coding Standards and Formatting suggestions
- gofmt()
- "Idiomatic Go"

: Golang has clearly defined standards and formatting suggestions.  There's even a command called `gofmt()` that will format your code the "correct" way.  Many golang editors will do this automatically as you save the file.
: The language was designed to have "one correct way" of doing things, which is referred to as "Idiomatic Go". One of the stated goals was to make legacy code easier to read and maintain.

* Cons
: It's not all sunshine and rainbows here.

* Tools of the Trade
.background images/Go-Logo_Blue.svg

* Editors
: There are a few options for Go development.  I've been doing most of my coding with Visual Studio Code and the associated golang plugins. https://code.visualstudio.com/docs/languages/go
: I gave Goland, the JetBrains Go IDE, a try.  It seemed nice, but it may be a little heavier than I needed as a beginning dev.  It's possible that it does some things better, such as debugging or refactoring. https://www.jetbrains.com/go/
: LiteIDE is a cross-platform editor for Go that's under development.  One thing that s nice about it is that it does syntax highlighting of Go's slide format. I used it for that.

* Suggested Projects
.background images/Go-Logo_Blue.svg
: Enough theory.  Let's do some projects.

* Questions?
.background images/Go-Logo_Blue.svg

* 
.background images/ThatConference2019.png
: See you next year!