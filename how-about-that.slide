# http://godoc.org/golang.org/x/tools/present
# Present files have the following format. 
# The first non-blank non-comment line is the title.
# The subtitle, date, and tags lines are optional.
How about a Go?
That Conference
6 Aug 2018
Tags: golang, ThatConference, projects
: Welcome to my session.


Ross Larson
Software Developer, WTS Paradigm
rosslarson@gmail.com
http://about.me/rosslarson
@rosslarsonWI

* Agenda
- The History of Golang
- Projects that use Golang
- General language overview
- Pros and Cons of Golang
- Tools to code with Go
- Project suggestions
: We are going over some stuff here.  It is going to be awesome.

* History of Golang
.background images/Go-Logo_Blue.svg
: There is some history here.  It started at Google in 2007.  Other stuff too.

* The Go Gopher
.image images/gopher.svg
: The Go Gopher was introduced when Golang was open sourced in 2009. It was designed by Renee French. https://blog.golang.org/gopher

* Projects that use Golang
.background images/Go-Logo_Blue.svg
: It's not just a toy.  Some serious projects use this language.

* General language overview
.background images/Go-Logo_Blue.svg
: Enough talk, let's look at some code.

* Hello World
.play -edit code/hello/hello-world.go
: Here's some go code. It contains a package, import statements, and a main function.

* Variables and Types
.play code/types/data-types.go
: Here's some variables and data types. There are a few of them. bool, string, int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, byte, rune, float32, float64, complex64, complex128
: Rune is an int32 code point.  It's got something to do with how Go handles UTF-8 characters. For more info on strings and characters - https://blog.golang.org/strings
: unitptr is an integer type that is large enough to hold the bit pattern of any pointer. https://golang.org/pkg/builtin/#uintptr

* Functions and Return values
.play code/multiple-returns/multiple-returns.go
: Functions are a thing.  They start with func. They can return nothing, one value, or multiple values.

* Arrays
.play code/arrays/arrays.go /^func arraysDemo/,/^}/
: In go, arrays are slightly more limited than in other languages.  Once they have been created, their length cannot be changed.  Nothing can be appended to them, but the values inside of the array can be changed. You can also refer to the range inside of an array like [x:y], but you have to note that the array position in the beginning of the array is included, but the array position at the end gives you everythig UNTIL that array position, NOT INCLUDING the given number.  You can also omit the number to go to either the upper or lower limit.

* Slices
.play code/slices/slices.go /^func slicesDemo/,/^}/
: Slices are a more flexible alternative to arrays. You can append to them, as well as copy them. They are zero indexed, like arrays.  When you want to refer to them, the variable gives you the whole object, or you can specify a range.  Range works similar to arrays.

* Maps
.play code/maps/maps.go /^func showSomeMaps/,/^}/
: Maps are a key value store.  They are similar to slices, but you can name the keys instead of needed to use numbers.  They are like dictionaries in python and HashMaps in C#. Maps do not store these key/value pairs in any particular order, so if you print out the whole map, the order of the keys will vary.

* Pros and Cons
.background images/Go-Logo_Blue.svg

* Tools of the Trade
.background images/Go-Logo_Blue.svg

* Suggested Projects
.background images/Go-Logo_Blue.svg

* Questions?
.background images/Go-Logo_Blue.svg